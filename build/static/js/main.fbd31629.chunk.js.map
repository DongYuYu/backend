{"version":3,"sources":["logo.svg","service/person.js","component/person.js","component/notification.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUri","getAll","axios","get","then","response","data","create","newPerson","post","deletePerson","key","delete","console","log","Person","person","className","name","number","onClick","id","Notification","notification","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","setPerson","persons","setPersons","notif","setNotif","deleteperson","find","window","confirm","personService","filter","useEffect","catch","exception","a","map","rows","length","onSubmit","event","preventDefault","concat","setTimeout","onChange","target","value","type","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,wICGrCC,EAAU,WAqCD,OAACC,OApCD,WACX,OAAOC,IAAMC,IAAIH,GAASI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAmCjCC,OA/BvB,SAAgBC,GACZ,OAAON,IAAMO,KAAKT,EAASQ,GAE1BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SA4BFI,aA1B/B,SAAsBC,GAOlB,OAAOT,IAAMU,OAAN,UAAgBZ,EAAhB,YAA2BW,IAAOP,MAAK,SAACC,GAC3CQ,QAAQC,IAAIT,QCOLU,EApBA,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQN,EAAkB,EAAlBA,aACrB,OAAQ,wBAAIO,UAAU,eAChBD,EAAOE,KADL,IACYF,EAAOG,OACvB,4BAAQC,QAAS,kBAAMV,EAAaM,EAAOK,MAA3C,YCgDOC,G,MA1DM,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,GAAqB,OAAjBA,EAAuB,CAoBvB,OADAV,QAAQC,IAAI,QAASS,GAWjB,yBAAKC,MAxBU,CACfC,MAAO,MACPC,WAAY,YACZC,SAAU,KACVC,YAAa,QACbC,aAAc,MACdC,QAAS,OAKTC,aAAc,OAad,kBAgBgBR,IAOxB,OAAO,OCkFIS,MAhIf,WAAgB,IAAD,EAIeC,mBAAS,IAJxB,mBAINjB,EAJM,KAIEkB,EAJF,OAKiBD,mBAAS,IAL1B,mBAKNE,EALM,KAKGC,EALH,OAWaH,mBAAS,MAXtB,mBAWNI,EAXM,KAWCC,EAXD,KAqEP5B,EAAe,SAACC,GACpB,IAAM4B,EAAeJ,EAAQK,MAAK,SAACxB,GAAD,OAAYA,EAAOK,KAAOV,KAExD8B,OAAOC,QAAP,oCAA4CH,EAAarB,KAAzD,OAEJyB,EAAcjC,aAAaC,GAAKP,MAAK,SAACC,GAEpCQ,QAAQC,IAAI,MAAOT,GACnB+B,EAAWD,EAAQS,QAAO,SAAC5B,GAAD,OAAYA,EAAOK,KAAOV,UAgCxD,OAlBAkC,qBAAU,WAURF,EAAc1C,SAASG,MAAK,SAAAC,GAC1B+B,EAAW/B,MAKZyC,OAAM,SAACC,GAAD,OAAelC,QAAQC,IAAIiC,QAClC,IAEA,yBAAK9B,UAAU,OAEb,wBAAIA,UAAU,SAAd,SACA,kBAAC,EAAD,CAAcM,aAAcc,IAG5B,4BAtGS,WACX,IAAMW,EAAIb,EAAQc,KAAI,SAAAjC,GAAM,OAAI,kBAAC,EAAD,CAAQL,IAAKK,EAAOK,GAAIL,OAAQA,EAAQN,aAAcA,GAAtD,QAMhC,OADAG,QAAQC,IAAIkC,GACLA,EAgGFE,IAEH,oCAAUf,EAAQgB,QAClB,0BAAMC,SAtFQ,SAACC,GAEjBA,EAAMC,iBACN,IAAM9C,EAAY,CAChBW,OAAQ,UACRD,KAAMF,GAUR2B,EAAcpC,OAAOC,GAAWJ,MAAK,SAAAC,GACnC+B,EAAWD,EAAQoB,OAAOlD,IAE1BiC,EAAStB,GACTkB,EAAU,IAMVsB,YAAW,WACTlB,EAAS,QAER,QAEJQ,OAAM,SAACC,GAAD,OAAelC,QAAQC,IAAI,YAAaiC,QAyD3C,2BAAOU,SAjCW,SAACJ,GACvBnB,EAAUmB,EAAMK,OAAOC,UAiCnB,4BAAQC,KAAK,UAAb,iBCxHYC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,MAAK,SAAAoE,GACjCA,EAAaC,kB","file":"static/js/main.fbd31629.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import axios from 'axios'\n\n\nconst baseUri = '/persons'\nconst getAll = () => {\n    return axios.get(baseUri).then(response => response.data)\n}\n\n\nfunction create(newPerson) {\n    return axios.post(baseUri, newPerson)\n\n    .then((response) => response.data)\n}\nfunction deletePerson(key) {\n    \n\n\n\n\n\n    return axios.delete(`${baseUri}/${key}`).then((response)=> {\n        console.log(response)\n\n\n\n\n\n\n        \n    })\n}\n\n\n\n\n\n\n\n\nexport default {getAll,create, deletePerson}","import React from 'react'\n\n\n\n\n\n\n\n\nconst Person = ({person, deletePerson}) => {\n    return (<li className='personclass'>\n         {person.name} {person.number}\n        <button onClick={() => deletePerson(person.id)}>\n          delete\n        </button>\n        </li>)\n}\n\n\n\n\n\n\n\n\n\n\n\n\nexport default Person","import React from 'react'\n\nconst Notification = ({notification}) => {\n    if (notification !== null) {\n        \n        \n        \n        \n        \n        const notifStyle = {\n            color: 'red',\n            background: 'lightgrey',\n            fontSize: '20',\n            borderStyle: 'solid',\n            borderRadius: '5px',\n            padding: '10px',\n            \n            \n            \n            \n            marginBottom: '10'\n        }\n        console.log('notif', notification)\n        return (\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            <div style={notifStyle}>\n\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                {`Welcome ${notification}`}\n            </div>\n        )\n    }\n\n\n\n    return null\n}\n\n\nexport default Notification","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport axios from 'axios';\nimport personService from './service/person'\nimport Person from './component/person'\nimport './App.css'\n\n\n\nimport Notification from './component/notification'\nfunction App() {\n  \n\n\n  const [person, setPerson] = useState('')  \n  const [persons, setPersons] = useState([])\n\n\n\n  \n  \n  const [notif, setNotif] = useState(null)\n  \n  \n  const rows = () => { \n    const a = persons.map(person => <Person key={person.id} person={person} deletePerson={deletePerson}> </Person>)\n    \n\n\n\n    console.log(a)\n    return a\n\n\n\n\n\n  \n  }\n  \n  \n\n  \n  \n  const addPerson = (event) => {\n    \n    event.preventDefault()\n    const newPerson = {\n      number: \"2323223\",\n      name: person\n    }\n    //setPersons(persons.concat(newPerson))\n    //setPerson('')\n\n\n\n\n    \n\n    personService.create(newPerson).then(response => {\n      setPersons(persons.concat(response))\n      \n      setNotif(person)\n      setPerson('')\n\n\n\n\n\n      setTimeout(()=> {\n        setNotif(null)\n      \n      }, 5000)\n    })\n    .catch((exception) => console.log('excpetion', exception))\n  }\n  \n\n\n  const deletePerson = (key) =>{\n    const deleteperson = persons.find((person) => person.id === key)\n   \n    if (window.confirm(`You really want to delete ${deleteperson.name}?`)) {\n    \n    personService.deletePerson(key).then((response) => {\n\n      console.log('log', response)\n      setPersons(persons.filter((person) => person.id !== key))\n    } )\n  \n  }\n  }\n\n\n\n\n\n\n  const handleNewPerson = (event) => {\n    setPerson(event.target.value)\n  }\n  useEffect(()=> {\n    // axios\n    // .get('http://localhost:3023/persons')\n    // .then((response) => {\n    //   console.log(response)\n    //   setPersons(response.data)\n    // }, (exception) => {\n    //   console.log(exception)\n       //})\n\n    personService.getAll().then(response => {\n      setPersons(response)\n    })\n\n    \n    \n    .catch((exception) => console.log(exception))\n  },[])\n  return (\n    <div className=\"App\">\n      \n      <h1 className='phone'>Phone</h1>\n      <Notification notification={notif}></Notification>\n      \n      \n      <ul>\n        {rows()}\n      </ul>\n      <p>debug {persons.length}</p>\n      <form onSubmit={addPerson}>\n        <input onChange={handleNewPerson}/>\n        <button type=\"submit\">new Person</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}